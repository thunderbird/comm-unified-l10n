/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIPop3IncomingServer.idl"
#include "nsIMsgFolder.idl"

interface nsIURI;


/**
 * nsIPop3Sink is the interface the POP3 protocol code uses to pass message
 * data to the folder.
 * NOTE: unlike the IMAP sink interfaces, nsIPop3Sink is not provided by the
 * folder object. Instead, nsPop3Sink is a stand-alone object, created and
 * owned by the nsPop3URL.
 */
[scriptable, uuid(ceabfc6b-f139-4c25-890f-efb7c3069d40)]
interface nsIPop3Sink : nsISupports {

  attribute boolean buildMessageUri;
  attribute AUTF8String messageUri;
  attribute AUTF8String baseMessageUri;

  /// message uri for header-only message version
  attribute AUTF8String origMessageUri;

  /**
   * Indicate that mail is about to be passed to the sink.
   * Once this is called, then the incorporate* methods can be called to pass
   * individual messages.
   * Once delivery is complete, one of endMailDelivery() or abortMailDelivery()
   * must be called.
   *
   * @param uidlDownload ?????
   * @param msgWindow
   */
  void beginMailDelivery(in boolean uidlDownload, in nsIMsgWindow msgWindow);

  /**
   * Indicate the successful conclusion of mail delivery.
   */
  void endMailDelivery(in nsIPop3Protocol protocol);

  /**
   * Indicate that mail delivery failed.
   */
  void abortMailDelivery(in nsIPop3Protocol protocol);

  /**
   * Start passing a message to the pop3sink. It might be the whole message
   * (POP3 RETR command) or it might just be the headers and first few lines
   * of the body (TOP command).
   * The call sequence is:
   * incorporateBegin() is called to start a message.
   * incorporateWrite() is called any number of times to send the data.
   * incorporateComplete() or incorporateAbort() is called to finish.
   *
   * @param uidlString - the UIDL of the incoming message.
   * @param flags - 0 = expect full message
   *                nsMsgMessageFlags.Partial = expect headers only (and
   *                potentially first few lines of body).
   */
  void incorporateBegin(in string uidlString, in unsigned long flags);

  /**
   * Pass a chunk the message to the sink.
   */
  void incorporateWrite(in string block, in long length);

  /**
   * Called when the message has been passed successfully.
   *
   * @param aMsgWindow
   * @param aSize the size of the message, as reported by the server.
   */
  void incorporateComplete(in nsIMsgWindow aMsgWindow, in int32_t aSize);

  /**
   * Called to indicate that passing over the message to the sink has failed.
   */
  void incorporateAbort();

  /**
   * Tell the pop3sink how many messages we're going to download.
   *
   * @param aNumMessages how many messages we're going to download.
   */
  void setMsgsToDownload(in unsigned long aNumMessages);

  void setBiffStateAndUpdateFE(in unsigned long biffState, in long numNewMessages, in boolean notify);

  attribute nsIPop3IncomingServer popServer;
  attribute nsIMsgFolder folder;
};
