/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIArray.idl"
#include "nsISupportsPrimitives.idl"
#include "MailNewsTypes2.idl"

interface nsIMsgDBHdr;
interface nsIRequest;
interface nsIStreamListener;
interface nsIMsgIncomingServer;
interface nsIInputStream;
interface nsIMsgCopyServiceListener;

// Forward declarations of callback classes defined later in this file.
interface IEwsFolderCallbacks;
interface IEwsFolderDeleteCallbacks;
interface IEwsMessageCallbacks;
interface IEwsMessageCreateCallbacks;
interface IEwsMessageDeleteCallbacks;
interface IEwsMessageFetchCallbacks;

/**
 * A client for communicating with a Microsoft Exchange server via Exchange Web
 * Services.
 *
 * This interface is intended to provide an abstraction of EWS operations to
 * bridge the foreign function interface between the components of a Thunderbird
 * mail protocol implementation and a single implementation of those EWS ops.
 *
 * With the exception of initialization, all client operations are intended to
 * be asynchronous, with implementations of the callback interfaces used to
 * handle the results of the operations or handle errors.
 */
[uuid(4a117361-653b-48a5-9ddb-588482ef9dbb)]
interface IEwsClient : nsISupports
{
  /**
   * Initializes a new client with the necessary host address and authentication
   * details to communicate with an Exchange server.
   *
   * @param endpoint - The HTTP(S) address of an Exchange server's EWS endpoint.
   * @param server - An incoming server entity corresponding to an EWS-capable
   *   account.
   */
  void initialize(in AUTF8String endpoint, in nsIMsgIncomingServer server);

  cenum Error : 8 {
    EWS_ERR_AUTHENTICATION_FAILED,
    EWS_ERR_UNEXPECTED,
  };

  /**
   * Synchronizes the local folder listing with changes made on the remote
   * Exchange server.
   *
   * @param callbacks - Callbacks for updating the local folder listing and the
   *   recorded synchronization state.
   * @param syncState - A synchronization state token provided by a prior sync
   *   request, or an empty string to indicate that this is the initial sync.
   */
  void syncFolderHierarchy(in IEwsFolderCallbacks callbacks, in AUTF8String syncStateToken);
  void syncMessagesForFolder(in IEwsMessageCallbacks callbacks, in AUTF8String folderId, in AUTF8String syncStateToken);
  void getMessage(in AUTF8String id, in IEwsMessageFetchCallbacks callbacks);
  void changeReadStatus(in Array<AUTF8String> messageIds, in boolean readStatus);

  /**
   * Creates a new message on the server using the data read from the stream.
   *
   * @param folderId - The EWS ID of the folder.
   * @param isDraft - Whether the message being created is an unsent draft.
   * @param messageStream - The input stream to read the message from.
   * @param callbacks - Callbacks for indicating operation state and status.
   */
  void createMessage(in AUTF8String folderId,
                     in boolean isDraft,
                     in nsIInputStream messageStream,
                     in IEwsMessageCreateCallbacks callbacks);

  void deleteMessages(in Array<AUTF8String> messageEwsIds, in IEwsMessageDeleteCallbacks callbacks);

  /**
   * Deletes a folder on the Exchange server.
   *
   * @param callbacks - Callbacks to indicate the success or failure of the
   *   folder deletion operation.
   * @param folderId - The EWS ID of the folder to delete.
   */
  void deleteFolder(in IEwsFolderDeleteCallbacks callbacks, in AUTF8String folderId);
};

[uuid(5dacc994-30e0-42f7-94c8-52756638add5)]
interface IEwsFolderCallbacks : nsISupports
{
  void recordRootFolder(in AUTF8String id);

  void create(in AUTF8String id, in AUTF8String parentId, in AString name, in unsigned long flags);
  void update(in AUTF8String id, in AUTF8String name);
  void delete(in AUTF8String id);

  void updateSyncState(in AUTF8String syncStateToken);
  void onError(in IEwsClient_Error err, in AUTF8String desc);
};

[uuid(a439c288-7cee-422a-96ab-6aa69259827c)]
interface IEwsFolderDeleteCallbacks : nsISupports
{
  /**
   * Called if a folder was successfully deleted on the server.
  */
  void onRemoteDeleteFolderSuccessful();
};

[uuid(dec2ddd5-b5a2-4724-bfc7-e5de31840f76)]
interface IEwsMessageCallbacks : nsISupports
{
  nsIMsgDBHdr createNewHeaderForItem(in AUTF8String ewsId);
  void commitHeader(in nsIMsgDBHdr hdr);

  void updateSyncState(in AUTF8String syncStateToken);
  void onError(in IEwsClient_Error err, in AUTF8String desc);
};

/**
 * A set of callbacks for handling creation of a new message on an Exchange
 * server.
 */
[uuid(ff45569f-d618-4bb0-9686-6cb24b92b02b)]
interface IEwsMessageCreateCallbacks : nsISupports
{
  /**
   * The following three methods are based on similarly-named ones in the
   * `nsIMsgCopyServiceListener` interface. They are intended to simplify
   * support for message copy and to support future implementation of a solution
   * for https://bugzilla.mozilla.org/show_bug.cgi?id=1931599.
   */

  void onStartCreate();
  void onStopCreate(in nsresult status);
  void setMessageKey(in nsMsgKey aKey);

  /**
   * Signals that the message was correctly created on the server.
   *
   * Returns the header object to update with the message's metadata and to
   * commit to the message database.
   *
   * `nsIMsgDBHdr` is a type quite strongly associated with the message database
   * and storage, and, going forwards, we'll want to decouple these interfaces
   * from local storage management. We use currently use it because we don't
   * have a better way to represent structured headers over the XPCOM boundary,
   * and parsing RFC822 messages is easier in Rust than using the C++ message
   * parser. We should revisit our use of `nsIMsgDBHdr` in client code the
   * situation improves.
   */
  nsIMsgDBHdr onRemoteCreateSuccessful(in AUTF8String ewsId);

  /**
   * Writes the provided message entry to the database.
   */
  void commitHeader(in nsIMsgDBHdr hdr);
};

[uuid(2bd557ee-a1ce-4563-aaf3-653914256452)]
interface IEwsMessageDeleteCallbacks : nsISupports
{
  void onRemoteDeleteSuccessful();
  void onError(in IEwsClient_Error err, in AUTF8String desc);
};

/**
 * A listener used when downloading message content.
 *
 * Its shape is loosely based on `nsIStreamListener`, which cannot be used in
 * this instance because we don't always have a request/channel that can be used
 * in method calls when fetching a message's content (and using `nullptr`
 * everywhere is quite ugly and potentially unsafe).
 */
[uuid(027150b1-d127-41a9-8945-18f9374755b3)]
interface IEwsMessageFetchCallbacks : nsISupports
{
  void onFetchStart();
  void onDataAvailable(in nsIInputStream inputStream, in unsigned long count);
  void onFetchStop(in nsresult status);
};
